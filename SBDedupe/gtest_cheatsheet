invoking a test

TEST(TestFixture, TestName){
    ASSERT_SOMETHING() << "error message";
}

ASSERT while fail test
EXPECT while warn

ASSERT_TRUE(condition);
EXPECT_TRUE(condition);
ASSERT_FALSE(condition);
EXPECT_FALSE(condition);

ASSERT_EQ(expected, actual);
EXPECT_EQ(expected, actual);	expected == actual
ASSERT_NE(val1, val2);
EXPECT_NE(val1, val2); 	val1 != val2
ASSERT_LT(val1, val2);
EXPECT_LT(val1, val2); 	val1 < val2
ASSERT_LE(val1, val2);
EXPECT_LE(val1, val2); 	val1 <= val2
ASSERT_GT(val1, val2);
EXPECT_GT(val1, val2); 	val1 > val2
ASSERT_GE(val1, val2);
EXPECT_GE(val1, val2); 	val1 >= val2

<< operator for streaming to an ostream.
to assert that a C string is NULL,
use ASSERT_STREQ(NULL, c_string) .
However, to compare two string objects, you should use ASSERT_EQ.

The assertions in this group compare two C strings.

the two C strings have the same content
ASSERT_STREQ(expected_str, actual_str);
EXPECT_STREQ(expected_str, actual_str);

the two C strings have different content
ASSERT_STRNE(str1, str2);
EXPECT_STRNE(str1, str2);

the two C strings have the same content, ignoring case
ASSERT_STRCASEEQ(expected_str, actual_str);
EXPECT_STRCASEEQ(expected_str, actual_str);

the two C strings have different content, ignoring case
ASSERT_STRCASENE(str1, str2);
EXPECT_STRCASENE(str1, str2);